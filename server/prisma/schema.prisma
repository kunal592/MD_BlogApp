// -------------------------------------
// Prisma Schema for DevBlog (Fixed + Validated)
// -------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------
// User Model
// -------------------------------------
model User {
  id        String   @id @default(uuid())
  googleId  String?  @unique
  email     String   @unique
  name      String
  avatar    String?
  bio       String?  @db.Text
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blogs                 Blog[]           @relation("UserBlogs")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  followers             Follows[]        @relation("followers")
  following             Follows[]        @relation("following")
  sentNotifications     Notification[]   @relation("sentNotifications")
  receivedNotifications Notification[]   @relation("receivedNotifications")
  reports               Report[]         @relation("UserReports")
  contactRequests       ContactRequest[]
  commentLikes          CommentLike[] // âœ… Added missing inverse relation
}

// -------------------------------------
// Blog Model
// -------------------------------------
model Blog {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  summary     String?
  coverImage  String?
  tags        String[]
  readTime    Int
  viewCount   Int      @default(0)
  isPublished Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author    User       @relation("UserBlogs", fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  bookmarks Bookmark[]
  comments  Comment[]
}

// -------------------------------------
// Follows (User â†” User self-relation)
// -------------------------------------
model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("following", fields: [followerId], references: [id])
  following User @relation("followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

// -------------------------------------
// Likes & Bookmarks
// -------------------------------------
model Like {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  blog Blog @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId])
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  blog Blog @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId])
}

// -------------------------------------
// Comments + Comment Likes
// -------------------------------------
model Comment {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  isApproved Boolean  @default(true)
  parentId   String?
  blogId     String
  userId     String

  blog    Blog          @relation(fields: [blogId], references: [id])
  user    User          @relation(fields: [userId], references: [id])
  parent  Comment?      @relation("CommentThread", fields: [parentId], references: [id])
  replies Comment[]     @relation("CommentThread")
  likes   CommentLike[]
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

// -------------------------------------
// Notifications
// -------------------------------------
model Notification {
  id          String   @id @default(uuid())
  type        String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  senderId    String
  recipientId String

  sender    User @relation("sentNotifications", fields: [senderId], references: [id])
  recipient User @relation("receivedNotifications", fields: [recipientId], references: [id])
}

// -------------------------------------
// Contact Requests
// -------------------------------------
model ContactRequest {
  id         String   @id @default(uuid())
  name       String
  email      String
  message    String   @db.Text
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

// -------------------------------------
// ðŸ†• Reports (Moderation System)
// -------------------------------------
model Report {
  id          String   @id @default(uuid())
  contentType String // "blog" | "comment" | "user"
  contentId   String
  reason      String
  createdAt   DateTime @default(now())
  resolved    Boolean  @default(false)

  reporterId String
  reporter   User   @relation("UserReports", fields: [reporterId], references: [id])
}

// -------------------------------------
// Enums
// -------------------------------------
enum Role {
  USER
  ADMIN
}
