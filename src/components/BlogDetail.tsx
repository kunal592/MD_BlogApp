import React, { useState } from 'react';
import { BlogPost } from '../data/blogPosts';
import { ArrowLeft, Bookmark, BrainCircuit, Heart, MessageSquare, Send } from 'lucide-react';

interface BlogDetailProps {
  post: BlogPost;
}

const BlogDetail: React.FC<BlogDetailProps> = ({ post }) => {
  const [isSummaryOpen, setIsSummaryOpen] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [comments, setComments] = useState([
    { id: 1, author: 'Jane Doe', text: 'Great insights, thanks for sharing!' },
    { id: 2, author: 'Sam Wilson', text: 'I have a different perspective on this, but it's a good read nonetheless.' },
  ]);

  const handleCommentSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (newComment.trim()) {
      setComments([...comments, { id: Date.now(), author: 'John Doe', text: newComment }]);
      setNewComment('');
    }
  };

  const summaryText = "This is a placeholder for the AI-generated summary. In a real application, this would be generated by a large language model based on the blog post content. The summary would provide a concise overview of the main points of the article, making it easier for readers to quickly grasp the key takeaways.";

  return (
    <div className="bg-white dark:bg-gray-900">
      <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <button onClick={() => window.history.back()} className="flex items-center text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 mb-8">
          <ArrowLeft size={18} className="mr-2" />
          Back to Blogs
        </button>

        <article>
          <h1 className="text-4xl font-extrabold text-gray-900 dark:text-white mb-4">{post.title}</h1>
          <div className="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-6">
            <span>By {post.author}</span>
            <span className="mx-2">â€¢</span>
            <span>{post.date}</span>
          </div>
          <img src={post.image} alt={post.title} className="w-full h-auto rounded-lg shadow-lg mb-8" />
          
          <div className="prose dark:prose-invert max-w-none mb-8" dangerouslySetInnerHTML={{ __html: post.content }} />
          
          <div className="flex items-center justify-between border-t border-b border-gray-200 dark:border-gray-700 py-4">
            <div className="flex items-center space-x-6">
              <button className="flex items-center space-x-2 text-gray-500 dark:text-gray-400 hover:text-red-500 dark:hover:text-red-400">
                <Heart size={20} />
                <span className="font-semibold">Like</span>
              </button>
              <button className="flex items-center space-x-2 text-gray-500 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-400">
                <Bookmark size={20} />
                <span className="font-semibold">Bookmark</span>
              </button>
            </div>
            <button 
              onClick={() => setIsSummaryOpen(true)} 
              className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
            >
              <BrainCircuit size={20} />
              <span className="font-semibold">AI Summarizer</span>
            </button>
          </div>
        </article>

        {/* AI Summary Modal */}
        {isSummaryOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-8 max-w-2xl w-full">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 flex items-center">
                <BrainCircuit size={24} className="mr-3 text-purple-500"/>
                AI Summary
              </h2>
              <p className="text-gray-600 dark:text-gray-300 mb-6">{summaryText}</p>
              <button 
                onClick={() => setIsSummaryOpen(false)} 
                className="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500">
                Close
              </button>
            </div>
          </div>
        )}

        {/* Comments Section */}
        <div className="mt-12">
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
            <MessageSquare size={24} className="mr-3"/> Comments
          </h2>
          <div className="space-y-6">
            {comments.map(comment => (
              <div key={comment.id} className="flex items-start space-x-4">
                <img src={`/avatars/avatar-${comment.id}.png`} alt={comment.author} className="w-10 h-10 rounded-full" />
                <div className="flex-1 bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                  <p className="font-semibold text-gray-900 dark:text-white">{comment.author}</p>
                  <p className="text-gray-700 dark:text-gray-300">{comment.text}</p>
                </div>
              </div>
            ))}
          </div>

          <form onSubmit={handleCommentSubmit} className="mt-8">
            <textarea 
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="Add a comment..."
            />
            <button type="submit" className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center">
              <Send size={16} className="mr-2"/>
              Post Comment
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

export default BlogDetail;
